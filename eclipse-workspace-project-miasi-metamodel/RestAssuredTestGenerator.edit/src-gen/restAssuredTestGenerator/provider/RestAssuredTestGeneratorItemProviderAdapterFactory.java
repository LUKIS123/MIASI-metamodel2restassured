/**
 */
package restAssuredTestGenerator.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import restAssuredTestGenerator.util.RestAssuredTestGeneratorAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class RestAssuredTestGeneratorItemProviderAdapterFactory extends RestAssuredTestGeneratorAdapterFactory
		implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public RestAssuredTestGeneratorItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link restAssuredTestGenerator.Program} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ProgramItemProvider programItemProvider;

	/**
	 * This creates an adapter for a {@link restAssuredTestGenerator.Program}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createProgramAdapter() {
		if (programItemProvider == null) {
			programItemProvider = new ProgramItemProvider(this);
		}

		return programItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link restAssuredTestGenerator.ClassDef} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ClassDefItemProvider classDefItemProvider;

	/**
	 * This creates an adapter for a {@link restAssuredTestGenerator.ClassDef}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createClassDefAdapter() {
		if (classDefItemProvider == null) {
			classDefItemProvider = new ClassDefItemProvider(this);
		}

		return classDefItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link restAssuredTestGenerator.Test} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TestItemProvider testItemProvider;

	/**
	 * This creates an adapter for a {@link restAssuredTestGenerator.Test}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTestAdapter() {
		if (testItemProvider == null) {
			testItemProvider = new TestItemProvider(this);
		}

		return testItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link restAssuredTestGenerator.Request} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RequestItemProvider requestItemProvider;

	/**
	 * This creates an adapter for a {@link restAssuredTestGenerator.Request}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRequestAdapter() {
		if (requestItemProvider == null) {
			requestItemProvider = new RequestItemProvider(this);
		}

		return requestItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link restAssuredTestGenerator.Method} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MethodItemProvider methodItemProvider;

	/**
	 * This creates an adapter for a {@link restAssuredTestGenerator.Method}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMethodAdapter() {
		if (methodItemProvider == null) {
			methodItemProvider = new MethodItemProvider(this);
		}

		return methodItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link restAssuredTestGenerator.Url} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UrlItemProvider urlItemProvider;

	/**
	 * This creates an adapter for a {@link restAssuredTestGenerator.Url}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUrlAdapter() {
		if (urlItemProvider == null) {
			urlItemProvider = new UrlItemProvider(this);
		}

		return urlItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link restAssuredTestGenerator.Headers} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected HeadersItemProvider headersItemProvider;

	/**
	 * This creates an adapter for a {@link restAssuredTestGenerator.Headers}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createHeadersAdapter() {
		if (headersItemProvider == null) {
			headersItemProvider = new HeadersItemProvider(this);
		}

		return headersItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link restAssuredTestGenerator.Header} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected HeaderItemProvider headerItemProvider;

	/**
	 * This creates an adapter for a {@link restAssuredTestGenerator.Header}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createHeaderAdapter() {
		if (headerItemProvider == null) {
			headerItemProvider = new HeaderItemProvider(this);
		}

		return headerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link restAssuredTestGenerator.QueryParams} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected QueryParamsItemProvider queryParamsItemProvider;

	/**
	 * This creates an adapter for a {@link restAssuredTestGenerator.QueryParams}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createQueryParamsAdapter() {
		if (queryParamsItemProvider == null) {
			queryParamsItemProvider = new QueryParamsItemProvider(this);
		}

		return queryParamsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link restAssuredTestGenerator.QueryParam} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected QueryParamItemProvider queryParamItemProvider;

	/**
	 * This creates an adapter for a {@link restAssuredTestGenerator.QueryParam}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createQueryParamAdapter() {
		if (queryParamItemProvider == null) {
			queryParamItemProvider = new QueryParamItemProvider(this);
		}

		return queryParamItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link restAssuredTestGenerator.Body} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BodyItemProvider bodyItemProvider;

	/**
	 * This creates an adapter for a {@link restAssuredTestGenerator.Body}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBodyAdapter() {
		if (bodyItemProvider == null) {
			bodyItemProvider = new BodyItemProvider(this);
		}

		return bodyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link restAssuredTestGenerator.Validate} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ValidateItemProvider validateItemProvider;

	/**
	 * This creates an adapter for a {@link restAssuredTestGenerator.Validate}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createValidateAdapter() {
		if (validateItemProvider == null) {
			validateItemProvider = new ValidateItemProvider(this);
		}

		return validateItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link restAssuredTestGenerator.StatusCode} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StatusCodeItemProvider statusCodeItemProvider;

	/**
	 * This creates an adapter for a {@link restAssuredTestGenerator.StatusCode}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStatusCodeAdapter() {
		if (statusCodeItemProvider == null) {
			statusCodeItemProvider = new StatusCodeItemProvider(this);
		}

		return statusCodeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link restAssuredTestGenerator.ResponseHeaders} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ResponseHeadersItemProvider responseHeadersItemProvider;

	/**
	 * This creates an adapter for a {@link restAssuredTestGenerator.ResponseHeaders}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createResponseHeadersAdapter() {
		if (responseHeadersItemProvider == null) {
			responseHeadersItemProvider = new ResponseHeadersItemProvider(this);
		}

		return responseHeadersItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link restAssuredTestGenerator.ResponseBody} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ResponseBodyItemProvider responseBodyItemProvider;

	/**
	 * This creates an adapter for a {@link restAssuredTestGenerator.ResponseBody}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createResponseBodyAdapter() {
		if (responseBodyItemProvider == null) {
			responseBodyItemProvider = new ResponseBodyItemProvider(this);
		}

		return responseBodyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link restAssuredTestGenerator.BodyContains} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BodyContainsItemProvider bodyContainsItemProvider;

	/**
	 * This creates an adapter for a {@link restAssuredTestGenerator.BodyContains}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBodyContainsAdapter() {
		if (bodyContainsItemProvider == null) {
			bodyContainsItemProvider = new BodyContainsItemProvider(this);
		}

		return bodyContainsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link restAssuredTestGenerator.BodyExact} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BodyExactItemProvider bodyExactItemProvider;

	/**
	 * This creates an adapter for a {@link restAssuredTestGenerator.BodyExact}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBodyExactAdapter() {
		if (bodyExactItemProvider == null) {
			bodyExactItemProvider = new BodyExactItemProvider(this);
		}

		return bodyExactItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link restAssuredTestGenerator.BodyExactPair} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BodyExactPairItemProvider bodyExactPairItemProvider;

	/**
	 * This creates an adapter for a {@link restAssuredTestGenerator.BodyExactPair}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBodyExactPairAdapter() {
		if (bodyExactPairItemProvider == null) {
			bodyExactPairItemProvider = new BodyExactPairItemProvider(this);
		}

		return bodyExactPairItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>) type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void dispose() {
		if (programItemProvider != null)
			programItemProvider.dispose();
		if (classDefItemProvider != null)
			classDefItemProvider.dispose();
		if (testItemProvider != null)
			testItemProvider.dispose();
		if (requestItemProvider != null)
			requestItemProvider.dispose();
		if (methodItemProvider != null)
			methodItemProvider.dispose();
		if (urlItemProvider != null)
			urlItemProvider.dispose();
		if (headersItemProvider != null)
			headersItemProvider.dispose();
		if (headerItemProvider != null)
			headerItemProvider.dispose();
		if (queryParamsItemProvider != null)
			queryParamsItemProvider.dispose();
		if (queryParamItemProvider != null)
			queryParamItemProvider.dispose();
		if (bodyItemProvider != null)
			bodyItemProvider.dispose();
		if (validateItemProvider != null)
			validateItemProvider.dispose();
		if (statusCodeItemProvider != null)
			statusCodeItemProvider.dispose();
		if (responseHeadersItemProvider != null)
			responseHeadersItemProvider.dispose();
		if (responseBodyItemProvider != null)
			responseBodyItemProvider.dispose();
		if (bodyContainsItemProvider != null)
			bodyContainsItemProvider.dispose();
		if (bodyExactItemProvider != null)
			bodyExactItemProvider.dispose();
		if (bodyExactPairItemProvider != null)
			bodyExactPairItemProvider.dispose();
	}

}
